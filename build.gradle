buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

group 'io.tolgee'
apply plugin: 'idea'

idea {
    module {
        excludeDirs += file('node_modules')
        excludeDirs += file('packages/core/node_modules')
        excludeDirs += file('packages/core/dist')
        excludeDirs += file('packages/core/lib')
        excludeDirs += file('packages/ui/node_modules')
        excludeDirs += file('packages/ui/dist')
        excludeDirs += file('packages/ui/lib')
        excludeDirs += file('packages/react/dist')
        excludeDirs += file('packages/react/lib')
        excludeDirs += file('packages/react/node_modules')
        excludeDirs += file('packages/ngx/dist')
        excludeDirs += file('packages/ngx/lib')
        excludeDirs += file('packages/ngx/node_modules')
        excludeDirs += file('e2e/cypress/testapps/dist')
        excludeDirs += file('e2e/cypress/videos')
    }
}

apply from: "./gradle/e2e.gradle"

task lernaBootstrap(type: Exec) {
    commandLine "npm", "run", "lerna-bootstrap", "--", "--ci"
    finalizedBy "linkLibReactToReactTestApp", "linkLibReactDomToReactTestApp", "linkLibReactToNextTestApp"
}

//this is a solution for multiple react error in hook
//dependabot cannot handle dependency path which doesn't exist
task linkLibReactToReactTestApp {
    def workdir = "testapps/react/node_modules"
    doLast {
        exec {
            workingDir workdir
            commandLine "rm", "-rf", "react"
        }
        exec {
            workingDir workdir
            commandLine "ln", "-sf", "../../../packages/react/node_modules/react", "."
        }
    }
}

//this is a solution for multiple react error in hook
//dependabot cannot handle dependency path which doesn't exist
task linkLibReactToNextTestApp {
    def workdir = "testapps/next/node_modules"
    doLast {
        exec {
            workingDir workdir
            commandLine "rm", "-rf", "react"
        }
        exec {
            workingDir workdir
            commandLine "ln", "-sf", "../../../packages/react/node_modules/react", "."
        }
    }
}


//this is a solution for multiple react error in hook
//dependabot cannot handle dependency path which doesn't exist
task linkLibReactDomToReactTestApp {
    def workdir = "testapps/react/node_modules"
    doLast {
        exec {
            workingDir workdir
            commandLine "rm", "-rf", "react-dom"
        }
        exec {
            workingDir workdir
            commandLine "ln", "-sf", "../../../packages/react/node_modules/react-dom", "."
        }
    }
}

task buildCore(type: Exec) {
    dependsOn "lernaBootstrap"
    commandLine "npm", "run", "build"
    workingDir "packages/core"
}

task buildReact(type: Exec) {
    dependsOn "lernaBootstrap"
    commandLine "npm", "run", "build"
    workingDir "packages/react"
    mustRunAfter "buildCore", "buildUi"
}

task buildVue(type: Exec) {
    dependsOn "lernaBootstrap"
    commandLine "npm", "run", "build"
    workingDir "packages/vue"
    mustRunAfter "buildCore", "buildUi"
}

task buildSvelte(type: Exec) {
    dependsOn "lernaBootstrap"
    commandLine "npm", "run", "build"
    workingDir "packages/svelte"
    mustRunAfter "buildCore", "buildUi"
}

task buildNgx(type: Exec) {
    dependsOn "lernaBootstrap"
    commandLine "npm", "run", "build"
    workingDir "packages/ngx"
    mustRunAfter "buildCore", "buildUi"
}

task buildNgxForPublish(type: Exec) {
    commandLine "npm", "run", "buildProd"
    workingDir "packages/ngx"
    mustRunAfter "buildCore", "buildUi"
}

task buildUi(type: Exec) {
    dependsOn "lernaBootstrap"
    commandLine "npm", "run", "build"
    workingDir "packages/ui"
}

task buildSocketIoClient(type: Exec) {
    dependsOn "lernaBootstrap"
    commandLine "npm", "run", "build"
    workingDir "packages/socketio-client"
}

task buildCoreTestapps(type: Exec) {
    dependsOn "lernaBootstrap", "buildCore", "buildUi"
    commandLine "npm", "run", "build"
    workingDir "testapps/core"
}

task buildReactTestapps(type: Exec) {
    dependsOn "lernaBootstrap", "buildCore", "buildUi"
    commandLine "npm", "run", "build"
    workingDir "testapps/react"
    mustRunAfter "buildCore", "buildUi"
}

task buildVueTestapps(type: Exec) {
    dependsOn "lernaBootstrap", "buildCore", "buildUi"
    commandLine "npm", "run", "build"
    workingDir "testapps/vue"
    mustRunAfter "buildCore", "buildUi"
}

task buildNgxTestapps(type: Exec) {
    dependsOn "lernaBootstrap", "buildCore", "buildUi", "buildNgx"
    commandLine "npm", "run", "build"
    workingDir "testapps/ngx"
    mustRunAfter "buildCore", "buildUi", "buildNgx"
}

task buildGatsbyTestapps(type: Exec) {
    dependsOn "lernaBootstrap", "buildCore", "buildUi", "buildReact"
    commandLine "npm", "run", "build"
    workingDir "testapps/gatsby"
    mustRunAfter "buildCore", "buildReact", "buildUi", "buildNgx"
}


task buildNextTestapps(type: Exec) {
    dependsOn "lernaBootstrap", "buildCore", "buildUi", "buildReact"
    commandLine "npm", "run", "build"
    workingDir "testapps/next"
    environment "NEXT_BUILD_DIR", "dist"
    mustRunAfter "buildCore", "buildReact", "buildUi"
}

task buildSvelteTestApps() {
    dependsOn "buildSvelteProdTestApp", "buildSvelteDevTestApp"
}

task buildSvelteProdTestApp(type: Exec) {
    dependsOn "lernaBootstrap"
    commandLine "npm", "run", "build"
    workingDir "testapps/svelte"
    mustRunAfter "buildCore", "buildUi", "buildSvelte"
}

task buildSvelteDevTestApp(type: Exec) {
    dependsOn "lernaBootstrap"
    commandLine "npm", "run", "build"
    workingDir "testapps/svelte"
    mustRunAfter "buildCore", "buildUi", "buildSvelte"
    environment 'SVELTE_TESTAPP_DIST_DIR': './build-dev',
                'VITE_TOLGEE_API_URL'    : 'http://localhost:8202',
                'VITE_TOLGEE_API_KEY'    : 'examples-admin-imported-project-implicit'
}

task buildAll(type: Task) {
    dependsOn "buildCore", "buildUi", "buildReact", "buildVue", "buildSvelte", "buildNgx", "buildSocketIoClient",
            "buildCoreTestapps", "buildReactTestapps", "buildVueTestapps", "buildNgxTestapps", "buildGatsbyTestapps", "buildNextTestapps", "buildSvelteTestApps"
    }

task developAll(type: Exec) {
    dependsOn "lernaBootstrap", "buildAll"
    commandLine "lerna", "run", "--parallel", "develop"
}

task developAllNoBuild(type: Exec) {
    commandLine "lerna", "run", "--parallel", "--include-dependencies", "develop"
}

task developReactNoBuild(type: Exec) {
    commandLine "lerna", "run", "--parallel", "--include-dependencies", "--scope", "*/react", "develop"
}

task developReact(type: Exec) {
    dependsOn "lernaBootstrap", "buildAll"
    commandLine "lerna", "run", "--parallel", "--include-dependencies", "--scope", "*/react", "develop"
}

task testCore(type: Exec) {
    commandLine "npm", "run", "test"
    workingDir "packages/core"
}

task testReact(type: Exec) {
    commandLine "npm", "run", "test"
    workingDir "packages/react"
}

task testSvelte(type: Exec) {
    commandLine "npm", "run", "test"
    workingDir "packages/svelte"
}

task testNgx(type: Exec) {
    commandLine "npm", "run", "test"
    workingDir "packages/ngx"
}

task testUi(type: Exec) {
    commandLine "npm", "run", "test"
    workingDir "packages/ui"
}

task testSocketIoClient(type: Exec) {
    commandLine "npm", "run", "test"
    workingDir "packages/socketio-client"
}

task testVue(type: Exec) {
    commandLine "npm", "run", "test"
    workingDir "packages/vue"
}

task build(type: Task) {
    dependsOn "buildAll", "testUi", "testCore", "testReact", "testSvelte", "testNgx", "testSocketIoClient", "testVue", "runE2e"
}
